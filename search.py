import requests
from bs4 import BeautifulSoup
import google.generativeai as genai
import json
# Set up Gemini API Key
genai.configure(api_key="AIzaSyAZRqFYHBRLIkwhLvTDRnpgn3tFWML5u_E")  # Replace with your Gemini API key
model = genai.GenerativeModel('gemini-1.5-flash')

def scrape_internshala(career_interest):
    """
    Scrape top 10 internship opportunities from Internshala.

    Args:
        career_interest (str): The user's career interest.

    Returns:
        list: A list of dictionaries containing internship titles and URLs.
    """
    base_url = f"https://internshala.com/internships/{career_interest}-internship/"
    response = requests.get(base_url)

    if response.status_code != 200:
        raise Exception(f"Failed to fetch data from Internshala: {response.status_code}")

    soup = BeautifulSoup(response.content, "html.parser")
    internships = []

    # Find internship titles and URLs
    internship_elements = soup.find_all("h3", class_="job-internship-name", limit=10)
    for element in internship_elements:
        a_tag = element.find("a", class_="job-title-href")
        if a_tag:
            title = a_tag.text.strip()
            url = f"https://internshala.com{a_tag['href']}"
            internships.append({"title": title, "url": url})

    return internships

def clean_response(output):
    """
    Clean the Gemini response to remove code block markers.

    Args:
        output (str): The raw text returned by Gemini.

    Returns:
        str: Cleaned text.
    """
    if output.startswith("```json"):
        output = output[len("```json"):].strip()
    if output.endswith("```"):
        output = output[:-len("```")].strip()
    try:
        return json.loads(output)
    except json.JSONDecodeError as e:
        raise ValueError(f"Failed to parse JSON: {e}")


def parse_with_gemini(input_text):
    """
    Use Gemini to parse and generate structured data.

    Args:
        input_text (str): Input text to be parsed by Gemini.

    Returns:
        dict: A structured response generated by Gemini.
    """
    try:
        response = model.generate_content(input_text)
        raw_text = response.text
        final_response = clean_response(raw_text)
        return final_response  # This will include structured JSON and any other metadata
    except Exception as e:
        raise Exception(f"Gemini API Error: {str(e)}")


def process_query(data):
    """
    Process user query and generate a response using scraping and Gemini.

    Args:
        data (dict): The user query data containing type and details.

    Returns:
        dict: A structured response based on the user's query.
    """
    if data["type"] == "career_interest":
        # Scrape internships from Internshala
        internships = scrape_internshala(data["careerInterest"])
        input_text = (
            f"Using the following internships from Internshala: {internships}, "
            f"return structured internship opportunities in JSON format with fields: "
            f"title, url, skills (up to 5), and free_resources (links to resources)."
        )
        return parse_with_gemini(input_text)

    elif data["type"] == "skills_and_hobbies":
        # Ask Gemini for possible careers based on skills and hobbies
        input_text = (
            f"Using the skills: {data['skills']} and hobbies: {data['hobbies']}, "
            f"provide a list of possible careers, relevant resources for skill development, "
            f"and where to look for opportunities. Return in JSON format with fields: "
            f"title, skills (up to 5), and free_resources."
        )
        return parse_with_gemini(input_text)

    else:
        raise ValueError("Invalid query type")
